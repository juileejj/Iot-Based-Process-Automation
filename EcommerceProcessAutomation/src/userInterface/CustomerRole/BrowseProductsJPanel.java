/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.CustomerRole;

import business.Customer.Customer;
import business.Enterprise.Enterprise;
import business.Enterprise.VendorStoreEnterprise;
import business.Order.CustomerOrderCatalog;
import business.Order.Order;
import business.Order.OrderItem;
import business.Product.Product;
import business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Juilee
 */
public class BrowseProductsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    CustomerOrderCatalog custOrderCatalog;
    Order order;
    boolean isCheckedOut = false;
    private ArrayList<Enterprise> enterpriseList;
    private Customer customer;

    /**
     * Creates new form BrowseProductsJPanel
     */
    public BrowseProductsJPanel(JPanel userProcessContainer, UserAccount userAccount, ArrayList<Enterprise> enterpriseList) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.customer=(Customer)userAccount.getPerson();
        order = new Order();
        this.enterpriseList = enterpriseList;
        populateVendorCombo();
        populateTable();
    }

    public void populateVendorCombo() {
        vendorComboBox.removeAllItems();
        for (Enterprise enterprise : enterpriseList) {
            if (enterprise instanceof VendorStoreEnterprise) {
                vendorComboBox.addItem(enterprise);
            }
        }

    }

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) productTable.getModel();
        VendorStoreEnterprise enterprise = (VendorStoreEnterprise) vendorComboBox.getSelectedItem();
        dtm.setRowCount(0);
        for (Product product : enterprise.getProductCatalog().getProductList()) {
            Object row[] = new Object[4];
            row[0] = product;
            row[1] = product.getPrice();
            row[2] = product.getAvailability();
            row[3] = product.getProductType();
            dtm.addRow(row);
        }
    }

    private void refreshProductTable(String keyWord) {
        int rowCount = productTable.getRowCount();
        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }

        for (Enterprise e : enterpriseList) {
           if(e instanceof VendorStoreEnterprise)
           {
               VendorStoreEnterprise enterprise=(VendorStoreEnterprise)e;
            for (Product p : enterprise.getProductCatalog().getProductList()) {
                if (keyWord.equals(p.getProdName())) {
                    Object row[] = new Object[4];
                    row[0] = p;
                    row[1] = p.getPrice();
                    row[2] = p.getAvailability();
                    row[3] = p.getProductType();
                    model.addRow(row);
                }
            }
           }
        }

    }

    public void refreshOrderTable() {
        int rowCount = orderTable.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            ((DefaultTableModel) orderTable.getModel()).removeRow(i);
        }

        for (OrderItem oi : order.getOrderItemList()) {
            Object row[] = new Object[4];
            row[0] = oi;
            row[1] = oi.getSalesPrice();
            row[2] = oi.getQuantity();
            row[3] = oi.getSalesPrice() * oi.getQuantity();
            
            ((DefaultTableModel) orderTable.getModel()).addRow(row);
        }
        populateOrderTotal();
    }

    private void populateOrderTotal() {
        float orderTotal = 0;
        for (OrderItem oi : order.getOrderItemList()) {
            orderTotal = orderTotal + (oi.getQuantity() * oi.getSalesPrice());
        }
        txtOrderTotal.setText(String.valueOf(orderTotal));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        btnModifyQuantity = new javax.swing.JButton();
        btnRemoveOrderItem = new javax.swing.JButton();
        addtoCartButton6 = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        txtSearchKeyWord = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtNewQuantity = new javax.swing.JTextField();
        btnSearchProduct = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtOrderTotal = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        vendorComboBox = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Product name");

        btnModifyQuantity.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });

        btnRemoveOrderItem.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnRemoveOrderItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete-icon.gif"))); // NOI18N
        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });

        addtoCartButton6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        addtoCartButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cart-icon_small.png"))); // NOI18N
        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });

        btnCheckOut.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnCheckOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/checkok.png"))); // NOI18N
        btnCheckOut.setText("Confirm Order");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel());

        txtSearchKeyWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchKeyWordActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Quantity:");

        btnSearchProduct.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSearchProduct.setText("Search Product By Name");
        btnSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchProductActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Order Total");

        txtOrderTotal.setEnabled(false);

        productTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Price", "Availability", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Item in cart");

        vendorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vendorComboBoxActionPerformed(evt);
            }
        });

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Select Vendor");

        backJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/back_icon.gif"))); // NOI18N
        backJButton.setText(" Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(addtoCartButton6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtOrderTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(112, 112, 112)
                            .addComponent(vendorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(55, 55, 55)
                            .addComponent(txtSearchKeyWord, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(btnSearchProduct)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(504, 504, 504)))
                .addGap(54, 54, 54))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(86, 86, 86)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnModifyQuantity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCheckOut)
                                .addGap(18, 18, 18)
                                .addComponent(btnRemoveOrderItem)))
                        .addComponent(jLabel7))
                    .addContainerGap(22, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vendorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearchKeyWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnSearchProduct))
                .addGap(146, 146, 146)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(addtoCartButton6)
                    .addComponent(jLabel3)
                    .addComponent(txtOrderTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(229, 229, 229)
                .addComponent(backJButton)
                .addContainerGap(53, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(120, 120, 120)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(83, 83, 83)
                    .addComponent(jLabel7)
                    .addGap(10, 10, 10)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(30, 30, 30)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCheckOut)
                        .addComponent(btnModifyQuantity)
                        .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnRemoveOrderItem))
                    .addContainerGap(100, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        int selectedRow = orderTable.getSelectedRow();
        //Product selectedProduct;
        //int salesPrice=0;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (!txtNewQuantity.getText().isEmpty() && !txtNewQuantity.getText().equals("0")) {
            OrderItem orderItem = (OrderItem) orderTable.getValueAt(selectedRow, 0);
            int currentAvail = orderItem.getProduct().getAvailability();
            int oldQty = orderItem.getQuantity();
            int newQty = Integer.parseInt(txtNewQuantity.getText());
            if (newQty > (currentAvail + oldQty)) {
                JOptionPane.showMessageDialog(null, "Quantity is more than the availability");
                //return;
            } else {
                if (newQty <= 0) {
                    JOptionPane.showMessageDialog(null, "Invalid qty");
                    return;
                }
                orderItem.setQuantity(newQty);
                orderItem.getProduct().setAvailability(currentAvail + (oldQty - newQty));
                refreshOrderTable();
                populateTable();

            }
        } else {
            JOptionPane.showMessageDialog(null, "Quantity cannot be zero!!");
        }

    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
        int selectedRowCount = orderTable.getSelectedRowCount();
        if (selectedRowCount <= 0) {
            JOptionPane.showMessageDialog(null, "You didn't select any rows from the orderItem table!");
            return;
        }

        int row = orderTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Failed to retrive selected row");
            return;
        }

        OrderItem oi = (OrderItem) orderTable.getValueAt(row, 0);
        int oldQuantity = oi.getProduct().getAvailability();
        int orderQuantity = oi.getQuantity();
        int newQuantity = oldQuantity + orderQuantity;
        oi.getProduct().setAvailability(newQuantity);
        order.removeOrderItem(oi);
        JOptionPane.showMessageDialog(null, "The order item of " + orderQuantity + "of " + oi + " has been removed.");
        refreshOrderTable();
        populateTable();
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        int selectedRow = productTable.getSelectedRow();
        Product selectedProduct;
        float salesPrice = 0;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            selectedProduct = (Product) productTable.getValueAt(selectedRow, 0);
            salesPrice = selectedProduct.getPrice();
        }

        int fetchedQty = (Integer) quantitySpinner.getValue();
        if (fetchedQty <= 0) {
            JOptionPane.showMessageDialog(this, "Selected atlest 1 quantity", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (fetchedQty <= selectedProduct.getAvailability()) {
            boolean alreadyPresent = false;
            for (OrderItem orderItem : order.getOrderItemList()) {
                if (orderItem.getProduct() == selectedProduct) {
                    int oldAvail = selectedProduct.getAvailability();
                    int newAvail = oldAvail - fetchedQty;
                    selectedProduct.setAvailability(newAvail);
                    orderItem.setQuantity(fetchedQty + orderItem.getQuantity());
                    alreadyPresent = true;
                    refreshOrderTable();
                    populateTable();

                    break;
                }
            }

            if (!alreadyPresent) {
                int oldAvail = selectedProduct.getAvailability();
                int newAvail = oldAvail - fetchedQty;
                selectedProduct.setAvailability(newAvail);
                OrderItem oi = order.addOrderItem(selectedProduct, fetchedQty, salesPrice);
                refreshOrderTable();
                populateTable();

            }
        } else {
            JOptionPane.showMessageDialog(this, "Quantity > Availability!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        if (order.getOrderItemList().size() > 0) {
            custOrderCatalog = customer.getCustomerOrderCatalog();
            VendorStoreEnterprise enterprise = (VendorStoreEnterprise)vendorComboBox.getSelectedItem();
            //DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
            Date date = new Date();
            order.setOrderDate(date);
            
            custOrderCatalog.addOrder(order);
            enterprise.getMasterOrderCatalog().addOrder(order);
            isCheckedOut = true;
            JOptionPane.showMessageDialog(null, "Order added successfully!");
            order = new Order();
            refreshOrderTable();
            populateTable();
        } else {
            JOptionPane.showMessageDialog(null, "Order not added as there are no items!!");
        }  // TODO add your handling code here:

    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void txtSearchKeyWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchKeyWordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchKeyWordActionPerformed

    private void btnSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchProductActionPerformed
        String keyWord = txtSearchKeyWord.getText();
        refreshProductTable(keyWord);
    }//GEN-LAST:event_btnSearchProductActionPerformed

    private void vendorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vendorComboBoxActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_vendorComboBoxActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton btnSearchProduct;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JTextField txtNewQuantity;
    private javax.swing.JTextField txtOrderTotal;
    private javax.swing.JTextField txtSearchKeyWord;
    private javax.swing.JComboBox vendorComboBox;
    // End of variables declaration//GEN-END:variables
}
